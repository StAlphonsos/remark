=head1 NAME

Remark::Doc - Description

=head1 SYNOPSIS

use Remark::Doc;
blah;

=head1 DESCRIPTION

Describe the module.

=head1 AUTHOR

attila <attila@stalphonsos.com>

=head1 COPYRIGHT AND LICENSE

(C) 2002-2003 by attila <attila@stalphonsos.com>.  all rights reserved.

=head1 VERSION

$Id: Doc.pm,v 1.6 2003/08/09 14:49:55 attila Exp $
Time-stamp: <2004-09-30 01:12:20 PDT>

=cut

package Remark::Doc;
use strict;
use Carp;
require Exporter;
use vars qw($VERSION @ISA @EXPORT @EXPORT_OK $DEBUGGING $TESTING);
$VERSION = q{0.1.0};
@ISA = qw(Exporter);
@EXPORT_OK = qw();
@EXPORT = @EXPORT_OK;
$DEBUGGING = 0;
$TESTING = 0;

use IO::File;
use Remark::Utils;
use Remark::Par;
use Remark::Sect;
use Remark::Chapter;

=head1 DETAILED DOCUMENTATION

This class exports the following interface:

=cut

=head2 describe [$stream]

=cut

sub describe {
  my $self = shift(@_);
  my $stream = shift(@_) || \*STDOUT;
  print $stream "<Document\n   title=\"",$self->{title},"\"\n";
  print $stream "   nChapters=", scalar(@{$self->{chapters}}),"\n";
  print $stream "   nSections=",$self->{nsections},"\n";
  print $stream "   nParagraphs=",$self->{nparagraphs},"\n";
  print $stream "   nWords=", $self->{nwords},"\n";
  #print $stream "   Preamble:\n";
  #print $stream "     ",join("\n     ", @{$self->{preamble}}),"\n";
  print $stream "   date=\"",$self->{date},"\"\n" if $self->{date};
  print $stream "   author=\"",$self->{author},"\"\n" if $self->{author};
  print $stream "/>\n";
}

sub suss_preamble {
  my $self = shift(@_);
  print STDERR "[suss_preamble]\n" if ($self->{context}->{'VERBOSE'} > 1);
  foreach my $pre (@{$self->{preamble}}) {
    $pre = psychochomp($pre);
    print STDERR "[suss: $pre]\n" if ($self->{context}->{'VERBOSE'} > 1);
    if ($pre =~ /^Time-stamp:\s+<(.*)>/i) {
      $self->{date} = psychochomp($1);
    } elsif ($pre =~ /^Copyright\s+(\xa9|\([cC]\))\s+([-0-9,]+)\s+(\S.*)$/i) {
      my @years = split(/,/, $2);
      my $holder = psychochomp($3);
      $holder =~ s/^[bB]y\s+//;
      $self->{copyright_years} = [ @years ];
      $self->{copyright_holder} = $holder;
    } elsif ($pre =~ /^[bB]y\s+(\S.*)$/) {
      my $name = psychochomp($1);
      $name =~ s/^[bB]y\s+//;
      $self->{author} = "" unless $self->{author};
      $self->{author} .= "," if length($self->{author});
      $self->{author} .= $name;
    }
  }
  if (defined($self->{copyright_holder}) && !defined($self->{author})) {
    my($name) = split(/\./, $self->{copyright_holder});
    $name = psychochomp($name);
    $self->{author} = $name if $name;
  }
  print STDERR "[suss: ",
    join(" ",
         map{defined($self->{$_})?("$_=|".$self->{$_}."|"):""}
         qw(date author copyright_holder copyright_years)),"]\n"
           if ($self->{context}->{'VERBOSE'} > 1);
}
##
sub output_html {
}
##
sub output_docbook {
  my($self,$type,$fn,$ofn,$ostream) = @_;
  my $title = $self->{title};
  $title = wiggle($title);
  my $ts = POSIX::strftime("%a, %d %b %Y at %H:%M", localtime time);
  my $dtd = $self->{context}->{DTD};
  my $rootelt = $self->{context}->{ROOT_ELT};
  print $ostream qq{<!DOCTYPE $rootelt PUBLIC "$dtd">\n};
  print $ostream "<!-- ",$self->{title}," -->\n";
  my($p,$v) = ($self->{context}->{P},$self->{context}->{VERSION});
  print $ostream "<!-- generated by $p $v at $ts -->\n";
  print $ostream join("\n",map { "<!-- $_ -->" } @{$self->{preamble}}),"\n";
  print $ostream "<book>\n";
  print $ostream " <title>",$self->{title},"</title>\n";
  if (defined($self->{date}) || defined($self->{author}) ||
      defined($self->{copyright_years}) ||
      defined($self->{copyright_holder})) {
    print $ostream " <bookinfo>\n";
    my @a = split(/,/, $self->{author});
    foreach my $auth (@a) {
      $auth = wiggle($auth);
      my($first,$last) = split(/\s+/, $auth);
      if (!defined($last)) {
        print $ostream "  <author>\n   <firstname>$first</firstname>\n  </author>\n";
      } else {
        print $ostream "  <author>\n   <firstname>$first</firstname>\n   <surname>$last</surname>\n  </author>\n";
      }
    }
    print $ostream
      "  <othercredit>\n   <othername>Generated by $p $v $ts</othername>\n  </othercredit>\n";
    print $ostream "  <date>",$self->{date},"</date>\n" if $self->{date};
    if (defined($self->{copyright_years}) ||
        defined($self->{copyright_holder})) {
      my @years = @{$self->{copyright_years}}
        if defined $self->{copyright_years};
      my $holder = psychochomp($self->{copyright_holder});
      $holder = wiggle($holder);
      print $ostream "  <copyright>\n";
      print $ostream
        join("\n",map{"   <year>$_</year>"} @years),"\n"
          if defined($self->{copyright_years});
      print $ostream "   <holder>$holder</holder>\n"
        if defined($self->{copyright_holder});
      print $ostream "  </copyright>\n";
    }
    print $ostream " </bookinfo>\n";
  }
  if (defined($self->{preface})) {
    ##print STDERR "*have preface*" if ($self->{context}->{VERBOSE});
    $self->{preface}->output_docbook(1,$ostream,1);
  }
  foreach my $chap (@{$self->{chapters}}) {
    $chap->output_docbook(1,$ostream);
  }
  print $ostream "</book>\n";
  print $ostream "<!-- EOF -->\n";
  print STDERR "\n" if $self->{context}->{Dots};
}
##
sub title {
  my $self = shift(@_);
  my $newtitle = shift(@_);
  my $oldtitle = $self->{title};
  $self->{title} = $newtitle if defined $newtitle;
  return $oldtitle;
}
##
sub outfile_name {
  my $self = shift(@_);
  my $ifn = shift(@_);
  my @parts = split(/\./, $ifn);
  my $ofn = undef;
  $ofn = "$ifn.xml" if (scalar(@parts) == 1);
  unless ($ofn) {
    pop(@parts);
    push(@parts, "xml");
    $ofn = join(".", @parts);
  }
  print STDERR "[Output: $ifn => $ofn]\n" if ($self->{context}->{VERBOSE});
  return $ofn;
}
##
sub output {
  my $self = shift(@_);
  my $fn = shift(@_);
  my $type = shift(@_) || 'docbook';
  my $out_sub = "output_$type";
  my $ofn = undef;
  my $ostream = \*STDOUT;
  if ($fn) {
    $ofn = $self->outfile_name($fn);
    my $p = $self->{context}->{P};
    open(OFN,">$ofn") || die "$p: opening output file $ofn: $!\n";
    $ostream = \*OFN;
  }
  ($type eq 'docbook') && ($self->output_docbook($type,$fn,$ofn,$ostream));
  ($type eq 'html')    && ($self->output_html($type,$fn,$ofn,$ostream));
  #&$out_sub($self, $type, $fn, $ofn, $ostream);
  close($ostream) if $fn;
}
##
sub add_chap {
  my $self = shift(@_);
  my $chap = shift(@_);
  return unless $chap;
  if ($chap->marked("preface")) {
    my $p = $self->{context}->{P};
    die "$p: more than one preface!\n" if defined($self->{preface});
    print STDERR "*adding preface*\n" if $self->{context}->{VERBOSE};
    $self->{preface} = $chap;
  } else {
    push(@{$self->{chapters}}, $chap);
    print STDERR "[Added Chapter: ",$chap->{name}," ",
      $chap->{nwords}," words ",$chap->{nparagraphs}," paras]\n"
        if $self->{context}->{VERBOSE};
  }
  $self->{nwords} += $chap->{nwords};
  $self->{nparagraphs} += $chap->{nparagraphs};
  $self->{nsections} +=
    defined($chap->{sections})? scalar(@{$chap->{sections}}): 0;
  return $self;
}
##
sub find_chap {
  my $self = shift(@_);
  my $name = shift(@_);
  return unless $name;
  foreach my $chap (@{$self->{chapters}}) {
    return $chap if ($chap->{name} =~ /$name/);
  }
  return undef;
}
##
sub new {
  my $proto = shift;
  my $class = ref($proto) || $proto;
  my %args = @_;
  my $fn = $args{'input_file'};
  my $self =
    bless
      { title => psychochomp($args{title} || "Untitled Document"),
        preamble => $args{preamble} || [],
        chapters => $args{chapters} || [],
        nwords => 0,
        nparagraphs => 0,
        nsections => 0,
        preface => undef,
        context => $args{'context'},
        filename => $fn,
      }, $class;
  if ($self->{'filename'}) {
    $self->{_STREAM} = new IO::File "< $fn" ||
      Carp::croak qq{could not open input file: $fn};
  } else {
    $self->{_STREAM} = \*STDIN;
  }
  return $self;
}
##
sub graphy_boundary {
}
##
sub in_graphy {
}
##
sub graphy_line {
}
##
sub process_stream {
  my $self = shift(@_);
  my $istream = shift(@_) || $self->{_STREAM};
  my $stream = $istream || \*STDIN;
  my $iname = $self->{filename} || "<stdin>";
  my $inside = 0;
  my $in_bullet = 0;
  my $title = undef;
  my $doc = $self;
  my @preamble = ();
  my $curchap = undef;
  my $cursect = undef;
  my $curpar = undef;
  my $unnamed = 0;
  my $unpar = 0;
  my $parno = 0;
  my $chapno = 0;
  my $line_no = 0;
  my $uncchap = undef;
  my $ctx = $self->{context};
  my $V = $ctx->{VERBOSE};
  while (<$stream>) {
    ++$line_no;
    chomp;
    if (!$inside) {
      if (/^=+\[(.*)\]=+$/) {
        $title = $1;
        print STDERR "[Case -1: title=$title |$_|]\n"
          if ($self->{context}->{VERBOSE} > 3);
        $inside = 1;
        $doc = new Remark::Doc(context => $ctx, title => $title) unless $doc;
        $doc->title($title);
        if ($curpar) {
          if ($curchap) {
            if ($cursect) {
              $cursect->add_par($curpar);
              $curchap->add_sect($cursect);
            } else {
              $curchap->add_par($curpar);
            }
            $doc->add_chap($curchap) unless ($curchap == $uncchap);
          }
        }
        $curchap = new Remark::Chapter(context => $ctx, name => "$title");
        $cursect = undef;
        $curpar = undef;
      } elsif (/^=+\{(.*)\}=+$/) {
        $title = $1;
        print STDERR "[Preface: $1]\n" if $self->{context}->{VERBOSE};
        unless ($inside) {
          $inside = 1;
          print STDERR "[NEW DOC: $title]\n" if $V;
          $doc = new Remark::Doc(context => $ctx, title => $title)
            unless $doc;
          $doc->title($title);
        }
        if ($curchap) {
          print STDERR "[OLD CHAP]\n" if $V;
          if ($cursect) {
            $cursect->add_par($curpar) if $curpar;
            $curchap->add_sect($cursect);
          } elsif ($curpar) {
            $curchap->add_par($curpar);
          }
          $doc->add_chap($curchap) unless ($curchap == $uncchap);
          $cursect = undef;
          $curchap = undef;
          $curpar = undef;
        }
        $curchap = new Remark::Chapter(context => $ctx, name => "Preface");
        $curchap->mark("preface");
        $cursect = undef;
        $curpar = undef;
      } else {
        $_ =~ s/^\s+//;
        push(@preamble, $_);
      }
    } else {
      if (scalar(@preamble)) {
        $doc->{preamble} = [ @preamble ];
        @preamble = ();
      }
      if (/^=+\<(.*)\>=+$/) {
        print STDERR "[Case 0: $1]\n" if ($self->{context}->{VERBOSE} > 3);
        if ($cursect) {
          if ($curpar) {
            if ($cursect) {
              $cursect->add_par($curpar);
            } elsif ($curchap) {
              $curchap->add_par($curpar);
            }
            $curpar = undef;
          }
          $curchap->add_sect($cursect) if $curchap;
        } elsif ($curchap) {
          $curchap->add_par($curpar) if $curpar;
        }
        unless ($curchap) {
          ++$chapno;
          $curchap =
            new Remark::Chapter(context => $ctx,
                                name => "unnamed chapter #$chapno");
        }
        $cursect = new Remark::Sect(context => $ctx, name => $1);
        $curpar = undef;
      } elsif (/^=+\[(.*)\]=+$/) {
        my $ctitle = $1;
        print STDERR "[INSIDE bracks ctitle=|$ctitle|]\n" if $V;
        if ($curchap) {
          if ($cursect) {
            $cursect->add_par($curpar) if $curpar;
            $curchap->add_sect($cursect);
          } elsif ($curpar) {
            $curchap->add_par($curpar);
          }
          $doc->add_chap($curchap) unless ($curchap == $uncchap);
          $cursect = undef;
          $curchap = undef;
          $curpar = undef;
        }
        $curchap = new Remark::Chapter(context => $ctx, name => $ctitle);
        $cursect = undef;
        $curpar = undef;
      } elsif (/^=+$/) {
        print STDERR "[Case 1: $_]\n" if ($self->{context}->{VERBOSE} > 3);
        if ($cursect) {
          $cursect->add_par($curpar) if $curpar;
          $curchap->add_sect($cursect) if $curchap;
          $doc->add_chap($curchap) unless ($curchap == $uncchap);
          $cursect = undef;
          $curchap = $uncchap;
          unless ($curchap) {
            $curchap =
              new Remark::Chapter(context => $ctx, name => "--uncollected--");
            $uncchap = $curchap;
          }
        }
        ++$unnamed;
        $cursect =
          new Remark::Sect(context => $ctx,
                           name => "unnamed section #$unnamed");
        $curpar = undef;
      } elsif (/^([ ]{2})=\[.*\]=/) {
        $doc->graphy_boundary($_);
      } elsif ($doc->in_graphy()) {
        $doc->graphy_line($_);
      } elsif (/^([ ]{2})/) {
        my $leader = $1;
        my $nlead = length($leader);
        print STDERR "[Case 2: $_ $nlead]\n"
          if ($self->{context}->{VERBOSE} > 3);
        my $line = $_;
        unless ($curchap) {
          ++$unnamed;
          $curchap =
            new Remark::Chapter(context => $ctx,
                                name => "noname chapter #$unnamed");
        }
        if ($curpar && !$in_bullet) {
          if ($cursect) {
            $cursect->add_par($curpar);
          } else {
            $curchap->add_par($curpar);
          }
          $curpar = undef;
          ++$parno;
        }
        if (!$in_bullet) {
          $curpar =
            new Remark::Par(context => $ctx, name => "paragraph #$parno");
          $curpar->mark("revision_log") if ($line =~ /^\$(Id|Log):/);
          $curpar->mark("nofmt") if $nlead > 2;
        }
        $line =~ s/^[ ]+//;
        if (($line =~ /^([^\"\:\*]+):(\s.*)$/)&&($line !~ /^\s*(\[\[|\{\{)/)) {
          my $front = $1;
          my $back = $2;
          if (scalar((split(/\s+/, $front))) < $MAX_BULLET_WORDS) {
            $line = "*$1*:$2";
          }
          $curpar =
            new Remark::Par(context => $ctx, name => "paragraph #$parno")
              if (!defined($curpar) || !$in_bullet);
          $curpar->add_line($line);
        } elsif ($line =~ /^\s+([\*\-\+])\s+(\S.*)$/) {
          my $bullsym = $1;
          $line = $2;
          if ($bullsym eq '*') {
            $line = "%% ".$line;
          } elsif ($bullsym eq '-') {
            $line = "%%% ".$line;
          } else {
            $line = "%%%% ".$line;
          }
          if ($cursect) {
            $cursect->add_par($curpar);
          } else {
            $curchap->add_par($curpar);
          }
          $curpar =
            new Remark::Par(context => $ctx, name => "paragraph #$parno");
          $curpar->add_line($line);
          $in_bullet = 1;
        } elsif ($in_bullet && ($line =~ /^\s/)) {
          $curpar =
            new Remark::Par(context => $ctx, name => "paragraph #$parno")
              unless $curpar;
          $curpar->append_line($line);
        } else {
          if ($curpar && $in_bullet) {
            if ($cursect) {
              $cursect->add_par($curpar);
            } else {
              $curchap->add_par($curpar);
            }
            ++$parno;
          }
          $in_bullet = 0;
          $curpar =
            new Remark::Par(context => $ctx, name => "paragraph #$parno");
          $curpar->add_line($line);
        }
      } else {
        print STDERR "[Case 3 ($inside): $_]\n" if ($self->{context}->{VERBOSE} > 3);
        unless ($curpar) {
          ++$parno;
          $curpar =
            new Remark::Par(context => $ctx, name => "paragraph #$parno")
              unless $curpar;
        }
        $curpar->mark("revision_log")
          if ($_ =~ /^\$(Id|Log):/);
        $curpar->add_line($_);
      }
    }
  }
  if (scalar(@preamble)) {
    $doc->{preamble} = [ @preamble ];
    @preamble = ();
  }
  if ($curpar) {
    if ($cursect) {
      $cursect->add_par($curpar);
      unless ($curchap) {
        ++$unnamed;
        $curchap =
          new Remark::Chapter(context => $ctx,
                              name => "noname chapter #$unnamed");
      }
      $curchap->add_sect($cursect) if $curchap;
    } elsif ($curchap) {
      $curchap->add_sect($cursect);
    }
  }
  if ($cursect) {
    unless ($curchap) {
      ++$unnamed;
      $curchap =
        new Remark::Chapter(context => $ctx,
                            name => "noname chapter #$unnamed");
    }
    $curchap->add_sect($cursect);
    #$doc->add_chap($curchap);
  }
  $doc->add_chap($curchap) if $curchap;
  $doc->add_chap($uncchap) if $uncchap;
  $doc->suss_preamble();
  return $doc;
}
##
1;
__END__
##
# Local variables:
# tab-width: 2
# perl-indent-level: 2
# cperl-indent-level: 2
# indent-tabs-mode: nil
# comment-column: 40
# time-stamp-line-limit: 40
# End:
##
